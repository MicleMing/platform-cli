#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var exists = fs.existsSync;


var chalk = require('chalk');
var rm = require('rimraf');
var download = require('download-git-repo');

var program = require('commander');
var prompt = require('../lib/prompt');
var logger = require('../lib/logger');
var Spinner = require('../lib/spinner');

// 读取手脚架配置文件
var listPath = path.join(path.dirname(__dirname), 'list.json');
var list = JSON.parse(fs.readFileSync(listPath, 'utf8'));

program
    .usage('<template-name> [project-name]')
    .option('-l, --list', 'list platform template');

program.on('--help', function () {
    console.log('  Examples:');
    console.log();
    console.log(chalk.gray('    # create a new project with an  template'));
    console.log('    $ platform(pf) init {template-type} {my-project}');
    console.log();
    console.log();
});

program.parse(process.argv);


if (program.args.length < 1) {
    if (program.list) {
        getTemplateList();
        return;
    }

    return program.help();
}

if (program.args.length === 1) {
    console.log(chalk.red('please input project name'));
    return program.help();
}


var template = program.args[0];
var rawName = program.args[1];
var inPlace = !rawName || rawName === '.';
var name = inPlace ? path.relative('../', process.cwd()) : rawName;
var dir = program.directory;
var to = path.resolve(rawName || '.');
var clone = program.clone || false;

// 选择模板
if (!template) {
    console.log();
    console.log(chalk.red('  Please choose template'));
    program.help();
}

if (exists(to)) {
    prompt({
        tip: inPlace
            ? 'Generate project in current directory(y/n)?'
            : 'Target directory exists. Continue?(y/n)',
        handler: run.bind(this, template)
    })
}
else {
    run(template);
}


function getTemplateList () {
    console.log('TEMPLATE LIST');
    console.log('____________________________________________________');
    console.log();

    for (var key in list) {
        if (list.hasOwnProperty(key)) {
            var str = (function () {
                var str = '';
                var length = 15;
                while (length--) {
                    str += ' ';
                }
                return str;
            })();
            var formatKey = key + str.slice(key.length);
            console.log(chalk.green(formatKey) + 'platform(pf) init ' + key + ' {project-name}');
        }
    }
    console.log();
    console.log('____________________________________________________');
};

function run (template) {
    var spinner = new Spinner('download platform...');

    var projectPath = list[template];

    if (!projectPath) {
        console.log(chalk.red(template + ' is invalid or this template has been removed'));
        getTemplateList();
        return;
    }
    
    spinner.start();

    download(projectPath, to, {clone: clone}, function (err) {
        spinner.stop();
        if (err) {
            logger.fatal(err);
        }
        // 修改 package.json
        var pkgPath = path.join(to, 'package.json');
        var pkg = fs.readFileSync(pkgPath, 'utf8');
        pkg.name = rawName;

        var interReg = /<%=(.+?)%>/g;
        var result = '';
        var index = 0;
        var matcher = function (inter, data) {
            return data[inter];
        };

        pkg.replace(interReg, function (match, interpolate, offset) {
            result += pkg.slice(index, offset);
            index = offset + match.length;
            result += matcher(interpolate, {
                name: '"' + rawName + '"'
            });
            return match;
        });
        
        result += pkg.slice(index);
        fs.writeFileSync(pkgPath, result);

        console.log();
        logger.success('Gennerated in "%s".', name);
    })
}
