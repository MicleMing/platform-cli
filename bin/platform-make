#!/usr/bin/env node

var logger = require('../lib/logger');
var request = require('request')
var chalk = require('chalk')
var path = require ('path');
var fs = require ('fs');
var mkdirp = require ('mkdirp');

var BOILERLATER_DIR;
var BOILERLATER_CONFIG;


process.on('exit', function () {
    console.log();
});

var program = require('commander');

program
    .usage('make <type> [name]')
    .option('-l, --list', 'list available generators and usage examples')
    .parse(process.argv);

program.on('--help', function () {
    console.log('  Examples:');
    console.log();
    console.log(chalk.gray('    # create a new component'));
    console.log('    $ platform make component myComponent');
    console.log();
    console.log(chalk.gray('    # create a new page '));
    console.log('    $ platform make page myPage');
    console.log();
});

if (program.list) {
    // 列出可用命令
    if (getBoilerConfig()) {
        getCommandList();
    }
}
else if (program.args.length > 1) {

    if (getBoilerConfig()) {
        // generate
        // make component wt1
        generateFile(program.args[0], program.args[1]);        
    }

}
else {
    program.help();
}

function getBoilerConfig () {

    // 获取配置
    var platformConfig = path.join(path.dirname(process.cwd()), '.platform');
    if (!fs.existsSync(platformConfig)) {
        console.log();
        console.log(chalk.red('please check if you are in "src" or ".platform" is exist '));
        return false;
    }

    try {
        var boilerplate = JSON.parse(fs.readFileSync(platformConfig, 'utf8'));
        BOILERLATER_DIR = path.join(path.dirname(platformConfig), boilerplate['template']);
        BOILERLATER_CONFIG = path.join(BOILERLATER_DIR, 'config.json');
        return true;
    }
    catch (e) {
        console.log(e);
        return false;
    }
}


function getCommandList () {
    var config = fs.readFileSync(BOILERLATER_CONFIG);
    try {
        config = JSON.parse(config);
    } catch (e) {
        console.log(chalk.red('Error:'));
        console.log(e);
    }
    console.log();
    console.log(chalk.gray('======================================================'));
    for (var key in config) {
        console.log(key.charAt(0).toUpperCase() + key.substring(1));
        if (config.hasOwnProperty(key)) {
            if (key !== 'short') { // 非简写
                console.log(chalk.green('    #' + '  desc: ') + config[key].desc);
                console.log(chalk.green('    #' + 'sample: ')+ config[key].example);               
            }
            else {
                for (var complex in config[key]) {
                    if (config[key].hasOwnProperty(complex)) {
                        console.log(chalk.green('     ' + complex + '  :  ') + config[key][complex]);
                    }
                }
            }
        }
    }
    console.log(chalk.gray('======================================================'));
}

function generateFile (type, name) {
    var config = JSON.parse(fs.readFileSync(BOILERLATER_CONFIG));
    var cwd = process.cwd();
    var shortMap = config.short;
    type = shortMap[type];

    if (!config.hasOwnProperty(type)) {
        logger.fatal('Unkown generate type: ' + type);
        return;
    }

    var genObj = config[type];
    var genSourcePath = path.join(BOILERLATER_DIR, genObj['file']);

    try {
        var source = fs.readFileSync(genSourcePath);
    } catch (e) {
        logger.fatal('Error: ' + e);
    }

    var fileType = genObj['type'];
    var filename = '';
    var reg = new RegExp(fileType + '$');
    if (!reg.test(name)) {
        filename = name + fileType;
    }
    else {
        filename = name;
        name = name.replace(fileType, '');
    }

    var targetFilePath = path.join(cwd, type + 's', name, filename);
    var targetDir = path.dirname(targetFilePath);


    if (!fs.existsSync(targetDir)) {

        mkdirp.sync(targetDir);
    }
    if (fs.existsSync(targetFilePath)) {
        console.log();
        console.warn(chalk.green('operation fail, because this file has exists'));
    }
    else {
        fs.writeFileSync(targetFilePath, fs.readFileSync(genSourcePath));
        logger.success('Create ' + type + ': ' + chalk.green(name));
    }

}

